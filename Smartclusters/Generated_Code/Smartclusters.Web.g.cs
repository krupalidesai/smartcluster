//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Smartclusters
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace Smartclusters.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'country_data' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Smartclusters.Web")]
    public sealed partial class country_data : Entity
    {
        
        private string _countryname;
        
        private int _population;
        
        private Nullable<int> _reg_id;
        
        private EntityRef<registration> _registration;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCountrynameChanging(string value);
        partial void OnCountrynameChanged();
        partial void OnPopulationChanging(int value);
        partial void OnPopulationChanged();
        partial void OnReg_idChanging(Nullable<int> value);
        partial void OnReg_idChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="country_data"/> class.
        /// </summary>
        public country_data()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Countryname' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(200)]
        public string Countryname
        {
            get
            {
                return this._countryname;
            }
            set
            {
                if ((this._countryname != value))
                {
                    this.OnCountrynameChanging(value);
                    this.ValidateProperty("Countryname", value);
                    this._countryname = value;
                    this.RaisePropertyChanged("Countryname");
                    this.OnCountrynameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Population' value.
        /// </summary>
        [DataMember()]
        public int Population
        {
            get
            {
                return this._population;
            }
            set
            {
                if ((this._population != value))
                {
                    this.OnPopulationChanging(value);
                    this.RaiseDataMemberChanging("Population");
                    this.ValidateProperty("Population", value);
                    this._population = value;
                    this.RaiseDataMemberChanged("Population");
                    this.OnPopulationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Reg_id' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> Reg_id
        {
            get
            {
                return this._reg_id;
            }
            set
            {
                if ((this._reg_id != value))
                {
                    this.OnReg_idChanging(value);
                    this.RaiseDataMemberChanging("Reg_id");
                    this.ValidateProperty("Reg_id", value);
                    this._reg_id = value;
                    this.RaiseDataMemberChanged("Reg_id");
                    this.OnReg_idChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="registration"/> entity.
        /// </summary>
        [Association("registration_country_data", "Reg_id", "Reg_Id", IsForeignKey=true)]
        [XmlIgnore()]
        public registration registration
        {
            get
            {
                if ((this._registration == null))
                {
                    this._registration = new EntityRef<registration>(this, "registration", this.Filterregistration);
                }
                return this._registration.Entity;
            }
            set
            {
                registration previous = this.registration;
                if ((previous != value))
                {
                    this.ValidateProperty("registration", value);
                    if ((previous != null))
                    {
                        this._registration.Entity = null;
                        previous.country_data.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.Reg_id = value.Reg_Id;
                    }
                    else
                    {
                        this.Reg_id = default(Nullable<int>);
                    }
                    this._registration.Entity = value;
                    if ((value != null))
                    {
                        value.country_data.Add(this);
                    }
                    this.RaisePropertyChanged("registration");
                }
            }
        }
        
        private bool Filterregistration(registration entity)
        {
            return (entity.Reg_Id == this.Reg_id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._countryname;
        }
    }
    
    /// <summary>
    /// The 'registration' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Smartclusters.Web")]
    public sealed partial class registration : Entity
    {
        
        private string _confirmPassword;
        
        private EntityCollection<country_data> _country_data;
        
        private string _email;
        
        private string _fname;
        
        private string _lname;
        
        private string _password;
        
        private int _reg_Id;
        
        private EntityCollection<stck_data> _stck_data;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnConfirmPasswordChanging(string value);
        partial void OnConfirmPasswordChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFnameChanging(string value);
        partial void OnFnameChanged();
        partial void OnLnameChanging(string value);
        partial void OnLnameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnReg_IdChanging(int value);
        partial void OnReg_IdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="registration"/> class.
        /// </summary>
        public registration()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ConfirmPassword' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(45)]
        public string ConfirmPassword
        {
            get
            {
                return this._confirmPassword;
            }
            set
            {
                if ((this._confirmPassword != value))
                {
                    this.OnConfirmPasswordChanging(value);
                    this.RaiseDataMemberChanging("ConfirmPassword");
                    this.ValidateProperty("ConfirmPassword", value);
                    this._confirmPassword = value;
                    this.RaiseDataMemberChanged("ConfirmPassword");
                    this.OnConfirmPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="country_data"/> entity instances.
        /// </summary>
        [Association("registration_country_data", "Reg_Id", "Reg_id")]
        [XmlIgnore()]
        public EntityCollection<country_data> country_data
        {
            get
            {
                if ((this._country_data == null))
                {
                    this._country_data = new EntityCollection<country_data>(this, "country_data", this.Filtercountry_data, this.Attachcountry_data, this.Detachcountry_data);
                }
                return this._country_data;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(45)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Fname' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(45)]
        public string Fname
        {
            get
            {
                return this._fname;
            }
            set
            {
                if ((this._fname != value))
                {
                    this.OnFnameChanging(value);
                    this.RaiseDataMemberChanging("Fname");
                    this.ValidateProperty("Fname", value);
                    this._fname = value;
                    this.RaiseDataMemberChanged("Fname");
                    this.OnFnameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Lname' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(45)]
        public string Lname
        {
            get
            {
                return this._lname;
            }
            set
            {
                if ((this._lname != value))
                {
                    this.OnLnameChanging(value);
                    this.RaiseDataMemberChanging("Lname");
                    this.ValidateProperty("Lname", value);
                    this._lname = value;
                    this.RaiseDataMemberChanged("Lname");
                    this.OnLnameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(45)]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Reg_Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Reg_Id
        {
            get
            {
                return this._reg_Id;
            }
            set
            {
                if ((this._reg_Id != value))
                {
                    this.OnReg_IdChanging(value);
                    this.ValidateProperty("Reg_Id", value);
                    this._reg_Id = value;
                    this.RaisePropertyChanged("Reg_Id");
                    this.OnReg_IdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="stck_data"/> entity instances.
        /// </summary>
        [Association("registration_stck_data", "Reg_Id", "RegId")]
        [XmlIgnore()]
        public EntityCollection<stck_data> stck_data
        {
            get
            {
                if ((this._stck_data == null))
                {
                    this._stck_data = new EntityCollection<stck_data>(this, "stck_data", this.Filterstck_data, this.Attachstck_data, this.Detachstck_data);
                }
                return this._stck_data;
            }
        }
        
        private void Attachcountry_data(country_data entity)
        {
            entity.registration = this;
        }
        
        private void Detachcountry_data(country_data entity)
        {
            entity.registration = null;
        }
        
        private bool Filtercountry_data(country_data entity)
        {
            return (entity.Reg_id == this.Reg_Id);
        }
        
        private void Attachstck_data(stck_data entity)
        {
            entity.registration = this;
        }
        
        private void Detachstck_data(stck_data entity)
        {
            entity.registration = null;
        }
        
        private bool Filterstck_data(stck_data entity)
        {
            return (entity.RegId == this.Reg_Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._reg_Id;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'Smartclusters_Domain_Service1' DomainService.
    /// </summary>
    public sealed partial class Smartclusters_Domain_Service1 : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Smartclusters_Domain_Service1"/> class.
        /// </summary>
        public Smartclusters_Domain_Service1() : 
                this(new WebDomainClient<ISmartclusters_Domain_Service1Contract>(new Uri("Smartclusters-Web-Smartclusters_Domain_Service1.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Smartclusters_Domain_Service1"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The Smartclusters_Domain_Service1 service URI.</param>
        public Smartclusters_Domain_Service1(Uri serviceUri) : 
                this(new WebDomainClient<ISmartclusters_Domain_Service1Contract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Smartclusters_Domain_Service1"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public Smartclusters_Domain_Service1(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="country_data"/> entity instances that have been loaded into this <see cref="Smartclusters_Domain_Service1"/> instance.
        /// </summary>
        public EntitySet<country_data> country_datas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<country_data>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="registration"/> entity instances that have been loaded into this <see cref="Smartclusters_Domain_Service1"/> instance.
        /// </summary>
        public EntitySet<registration> registrations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<registration>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="stck_data"/> entity instances that have been loaded into this <see cref="Smartclusters_Domain_Service1"/> instance.
        /// </summary>
        public EntitySet<stck_data> stck_datas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<stck_data>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="country_data"/> entity instances using the 'GetCountry_data' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="country_data"/> entity instances.</returns>
        public EntityQuery<country_data> GetCountry_dataQuery()
        {
            this.ValidateMethod("GetCountry_dataQuery", null);
            return base.CreateQuery<country_data>("GetCountry_data", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="registration"/> entity instances using the 'GetRegistrations' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="registration"/> entity instances.</returns>
        public EntityQuery<registration> GetRegistrationsQuery()
        {
            this.ValidateMethod("GetRegistrationsQuery", null);
            return base.CreateQuery<registration>("GetRegistrations", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="stck_data"/> entity instances using the 'GetStck_data' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="stck_data"/> entity instances.</returns>
        public EntityQuery<stck_data> GetStck_dataQuery()
        {
            this.ValidateMethod("GetStck_dataQuery", null);
            return base.CreateQuery<stck_data>("GetStck_data", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new Smartclusters_Domain_Service1EntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'Smartclusters_Domain_Service1' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ISmartclusters_Domain_Service1Contract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCountry_data' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/Smartclusters_Domain_Service1/GetCountry_dataDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Smartclusters_Domain_Service1/GetCountry_data", ReplyAction="http://tempuri.org/Smartclusters_Domain_Service1/GetCountry_dataResponse")]
            [WebGet()]
            IAsyncResult BeginGetCountry_data(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCountry_data'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCountry_data'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCountry_data' operation.</returns>
            QueryResult<country_data> EndGetCountry_data(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRegistrations' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/Smartclusters_Domain_Service1/GetRegistrationsDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Smartclusters_Domain_Service1/GetRegistrations", ReplyAction="http://tempuri.org/Smartclusters_Domain_Service1/GetRegistrationsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRegistrations(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRegistrations'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRegistrations'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRegistrations' operation.</returns>
            QueryResult<registration> EndGetRegistrations(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStck_data' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/Smartclusters_Domain_Service1/GetStck_dataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/Smartclusters_Domain_Service1/GetStck_data", ReplyAction="http://tempuri.org/Smartclusters_Domain_Service1/GetStck_dataResponse")]
            [WebGet()]
            IAsyncResult BeginGetStck_data(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStck_data'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStck_data'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStck_data' operation.</returns>
            QueryResult<stck_data> EndGetStck_data(IAsyncResult result);
        }
        
        internal sealed class Smartclusters_Domain_Service1EntityContainer : EntityContainer
        {
            
            public Smartclusters_Domain_Service1EntityContainer()
            {
                this.CreateEntitySet<country_data>(EntitySetOperations.None);
                this.CreateEntitySet<registration>(EntitySetOperations.None);
                this.CreateEntitySet<stck_data>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'stck_data' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Smartclusters.Web")]
    public sealed partial class stck_data : Entity
    {
        
        private Nullable<int> _regId;
        
        private EntityRef<registration> _registration;
        
        private Nullable<float> _stck_aset;
        
        private int _stck_idxx;
        
        private Nullable<float> _stck_mrkt_valu;
        
        private string _stck_name;
        
        private Nullable<float> _stck_prft;
        
        private Nullable<int> _stck_sale;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnRegIdChanging(Nullable<int> value);
        partial void OnRegIdChanged();
        partial void Onstck_asetChanging(Nullable<float> value);
        partial void Onstck_asetChanged();
        partial void Onstck_idxxChanging(int value);
        partial void Onstck_idxxChanged();
        partial void Onstck_mrkt_valuChanging(Nullable<float> value);
        partial void Onstck_mrkt_valuChanged();
        partial void Onstck_nameChanging(string value);
        partial void Onstck_nameChanged();
        partial void Onstck_prftChanging(Nullable<float> value);
        partial void Onstck_prftChanged();
        partial void Onstck_saleChanging(Nullable<int> value);
        partial void Onstck_saleChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="stck_data"/> class.
        /// </summary>
        public stck_data()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'RegId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> RegId
        {
            get
            {
                return this._regId;
            }
            set
            {
                if ((this._regId != value))
                {
                    this.OnRegIdChanging(value);
                    this.RaiseDataMemberChanging("RegId");
                    this.ValidateProperty("RegId", value);
                    this._regId = value;
                    this.RaiseDataMemberChanged("RegId");
                    this.OnRegIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="registration"/> entity.
        /// </summary>
        [Association("registration_stck_data", "RegId", "Reg_Id", IsForeignKey=true)]
        [XmlIgnore()]
        public registration registration
        {
            get
            {
                if ((this._registration == null))
                {
                    this._registration = new EntityRef<registration>(this, "registration", this.Filterregistration);
                }
                return this._registration.Entity;
            }
            set
            {
                registration previous = this.registration;
                if ((previous != value))
                {
                    this.ValidateProperty("registration", value);
                    if ((previous != null))
                    {
                        this._registration.Entity = null;
                        previous.stck_data.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RegId = value.Reg_Id;
                    }
                    else
                    {
                        this.RegId = default(Nullable<int>);
                    }
                    this._registration.Entity = value;
                    if ((value != null))
                    {
                        value.stck_data.Add(this);
                    }
                    this.RaisePropertyChanged("registration");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'stck_aset' value.
        /// </summary>
        [DataMember()]
        public Nullable<float> stck_aset
        {
            get
            {
                return this._stck_aset;
            }
            set
            {
                if ((this._stck_aset != value))
                {
                    this.Onstck_asetChanging(value);
                    this.RaiseDataMemberChanging("stck_aset");
                    this.ValidateProperty("stck_aset", value);
                    this._stck_aset = value;
                    this.RaiseDataMemberChanged("stck_aset");
                    this.Onstck_asetChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'stck_idxx' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int stck_idxx
        {
            get
            {
                return this._stck_idxx;
            }
            set
            {
                if ((this._stck_idxx != value))
                {
                    this.Onstck_idxxChanging(value);
                    this.ValidateProperty("stck_idxx", value);
                    this._stck_idxx = value;
                    this.RaisePropertyChanged("stck_idxx");
                    this.Onstck_idxxChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'stck_mrkt_valu' value.
        /// </summary>
        [DataMember()]
        public Nullable<float> stck_mrkt_valu
        {
            get
            {
                return this._stck_mrkt_valu;
            }
            set
            {
                if ((this._stck_mrkt_valu != value))
                {
                    this.Onstck_mrkt_valuChanging(value);
                    this.RaiseDataMemberChanging("stck_mrkt_valu");
                    this.ValidateProperty("stck_mrkt_valu", value);
                    this._stck_mrkt_valu = value;
                    this.RaiseDataMemberChanged("stck_mrkt_valu");
                    this.Onstck_mrkt_valuChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'stck_name' value.
        /// </summary>
        [DataMember()]
        [StringLength(45)]
        public string stck_name
        {
            get
            {
                return this._stck_name;
            }
            set
            {
                if ((this._stck_name != value))
                {
                    this.Onstck_nameChanging(value);
                    this.RaiseDataMemberChanging("stck_name");
                    this.ValidateProperty("stck_name", value);
                    this._stck_name = value;
                    this.RaiseDataMemberChanged("stck_name");
                    this.Onstck_nameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'stck_prft' value.
        /// </summary>
        [DataMember()]
        public Nullable<float> stck_prft
        {
            get
            {
                return this._stck_prft;
            }
            set
            {
                if ((this._stck_prft != value))
                {
                    this.Onstck_prftChanging(value);
                    this.RaiseDataMemberChanging("stck_prft");
                    this.ValidateProperty("stck_prft", value);
                    this._stck_prft = value;
                    this.RaiseDataMemberChanged("stck_prft");
                    this.Onstck_prftChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'stck_sale' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> stck_sale
        {
            get
            {
                return this._stck_sale;
            }
            set
            {
                if ((this._stck_sale != value))
                {
                    this.Onstck_saleChanging(value);
                    this.RaiseDataMemberChanging("stck_sale");
                    this.ValidateProperty("stck_sale", value);
                    this._stck_sale = value;
                    this.RaiseDataMemberChanged("stck_sale");
                    this.Onstck_saleChanged();
                }
            }
        }
        
        private bool Filterregistration(registration entity)
        {
            return (entity.Reg_Id == this.RegId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._stck_idxx;
        }
    }
}
